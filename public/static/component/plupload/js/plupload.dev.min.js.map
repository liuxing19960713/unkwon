{"version":3,"sources":["public/static/component/plupload/js/plupload.dev.js"],"names":["window","o","undef","normalizeCaps","settings","resolve","feature","value","strict","map","chunks","jpgresize","pngresize","progress","multi_selection","dragdrop","drop_element","headers","urlstream_upload","canSendBinary","triggerDialog","caps","features","required_features","plupload","each","split","chunk_size","slice_blob","resize","enabled","multipart","send_binary_string","delay","setTimeout","fileFilters","VERSION","STOPPED","STARTED","QUEUED","UPLOADING","FAILED","DONE","GENERIC_ERROR","HTTP_ERROR","IO_ERROR","SECURITY_ERROR","INIT_ERROR","FILE_SIZE_ERROR","FILE_EXTENSION_ERROR","FILE_DUPLICATE_ERROR","IMAGE_FORMAT_ERROR","MEMORY_ERROR","IMAGE_DIMENSIONS_ERROR","mimeTypes","mimes","ua","typeOf","extend","guid","getAll","ids","el","els","i","length","get","push","getPos","getSize","xmlEncode","str","xmlEncodeChars","<",">","&","\"","'","replace","chr","toArray","inArray","addI18n","translate","isEmptyObj","hasClass","addClass","removeClass","getStyle","addEvent","removeEvent","removeAllEvents","cleanName","name","lookup","buildUrl","url","items","query","encodeURIComponent","indexOf","formatSize","size","round","num","precision","Math","pow","test","boundary","parseSize","parseSizeStr","predictRuntime","config","runtimes","up","runtime","Uploader","Runtime","thatCan","getOption","destroy","addFileFilter","cb","filters","file","regexp","this","trigger","code","message","maxSize","ii","files","options","uploadNext","count","state","status","calcFile","percent","ceil","loaded","calc","total","reset","origSize","uploaded","failed","queued","bytesPerSec","Date","startTime","getRUID","ctrl","fileInputs","fileDrops","getRuntime","uid","runtimeCan","cap","ruid","info","getInfo","can","bindEventListeners","bind","refresh","onCancelUpload","onBeforeUpload","onUploadFile","onUploadProgress","onStateChanged","onError","onFileUploaded","onDestroy","initControls","self","inited","queue","runtime_order","required_caps","preferred_caps","swf_url","flash_swf_url","xap_url","silverlight_xap_url","browse_button","fileInput","FileInput","accept","mime_types","file_data_name","multiple","container","onready","onchange","addFile","e","disabled","browse_button_hover","type","browse_button_active","init","fileDrop","FileDrop","drop_zone","ondrop","inSeries","resizeImage","blob","params","img","Image","onload","width","height","quality","preserve_headers","crop","downsize","onresize","getAsBlob","onerror","load","ex","setOption","option","_setOption","oldValue","max_file_size","send_file_name","extensionsRegExp","filter","extensions","ext","RegExp","join","prevent_duplicates","reinitRequired","call","unique_names","matches","match","target_name","id","handleError","retries","uploadNextChunk","offset","response","xhr","responseText","responseHeaders","getAllResponseHeaders","chunkBlob","formData","curChunkSize","args","chunkSize","min","slice","send_chunk_number","chunk","XMLHttpRequest","upload","onprogress","max_retries","Env","browser","onloadend","open","setRequestHeader","FormData","multipart_params","append","send","floor","getSource","resizedBlob","abort","err","stop","order","QueueProgress","preinitOpt","func","initOpt","start","disableBrowse","arguments","disable","getFile","fileName","filterFile","rule","res","resolveFile","File","isDetached","connectRuntime","Blob","filesAdded","removeFile","splice","removed","restartRequired","dispatchEvent","list","toLowerCase","hasEventListener","sort","a","b","priority","shift","unshift","fn","apply","scope","prototype","unbindAll","EventTarget","instance","PluploadFile","fileSize","lastModifiedDate","toLocaleString","getNative","filepool","src","mOxie"],"mappings":"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","file":"plupload.dev.min.js","sourcesContent":["/**\n * Plupload - multi-runtime File Uploader\n * v2.1.9\n *\n * Copyright 2013, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n *\n * Date: 2016-05-15\n */\n/**\n * Plupload.js\n *\n * Copyright 2013, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n */\n\n/*global mOxie:true */\n\n;(function(window, o, undef) {\n\nvar delay = window.setTimeout\n, fileFilters = {}\n;\n\n// convert plupload features to caps acceptable by mOxie\nfunction normalizeCaps(settings) {\t\t\n\tvar features = settings.required_features, caps = {};\n\n\tfunction resolve(feature, value, strict) {\n\t\t// Feature notation is deprecated, use caps (this thing here is required for backward compatibility)\n\t\tvar map = { \n\t\t\tchunks: 'slice_blob',\n\t\t\tjpgresize: 'send_binary_string',\n\t\t\tpngresize: 'send_binary_string',\n\t\t\tprogress: 'report_upload_progress',\n\t\t\tmulti_selection: 'select_multiple',\n\t\t\tdragdrop: 'drag_and_drop',\n\t\t\tdrop_element: 'drag_and_drop',\n\t\t\theaders: 'send_custom_headers',\n\t\t\turlstream_upload: 'send_binary_string',\n\t\t\tcanSendBinary: 'send_binary',\n\t\t\ttriggerDialog: 'summon_file_dialog'\n\t\t};\n\n\t\tif (map[feature]) {\n\t\t\tcaps[map[feature]] = value;\n\t\t} else if (!strict) {\n\t\t\tcaps[feature] = value;\n\t\t}\n\t}\n\n\tif (typeof(features) === 'string') {\n\t\tplupload.each(features.split(/\\s*,\\s*/), function(feature) {\n\t\t\tresolve(feature, true);\n\t\t});\n\t} else if (typeof(features) === 'object') {\n\t\tplupload.each(features, function(value, feature) {\n\t\t\tresolve(feature, value);\n\t\t});\n\t} else if (features === true) {\n\t\t// check settings for required features\n\t\tif (settings.chunk_size > 0) {\n\t\t\tcaps.slice_blob = true;\n\t\t}\n\n\t\tif (settings.resize.enabled || !settings.multipart) {\n\t\t\tcaps.send_binary_string = true;\n\t\t}\n\t\t\n\t\tplupload.each(settings, function(value, feature) {\n\t\t\tresolve(feature, !!value, true); // strict check\n\t\t});\n\t}\n\t\n\treturn caps;\n}\n\n/** \n * @module plupload\t\n * @static\n */\nvar plupload = {\n\t/**\n\t * Plupload version will be replaced on build.\n\t *\n\t * @property VERSION\n\t * @for Plupload\n\t * @static\n\t * @final\n\t */\n\tVERSION : '2.1.9',\n\n\t/**\n\t * The state of the queue before it has started and after it has finished\n\t *\n\t * @property STOPPED\n\t * @static\n\t * @final\n\t */\n\tSTOPPED : 1,\n\n\t/**\n\t * Upload process is running\n\t *\n\t * @property STARTED\n\t * @static\n\t * @final\n\t */\n\tSTARTED : 2,\n\n\t/**\n\t * File is queued for upload\n\t *\n\t * @property QUEUED\n\t * @static\n\t * @final\n\t */\n\tQUEUED : 1,\n\n\t/**\n\t * File is being uploaded\n\t *\n\t * @property UPLOADING\n\t * @static\n\t * @final\n\t */\n\tUPLOADING : 2,\n\n\t/**\n\t * File has failed to be uploaded\n\t *\n\t * @property FAILED\n\t * @static\n\t * @final\n\t */\n\tFAILED : 4,\n\n\t/**\n\t * File has been uploaded successfully\n\t *\n\t * @property DONE\n\t * @static\n\t * @final\n\t */\n\tDONE : 5,\n\n\t// Error constants used by the Error event\n\n\t/**\n\t * Generic error for example if an exception is thrown inside Silverlight.\n\t *\n\t * @property GENERIC_ERROR\n\t * @static\n\t * @final\n\t */\n\tGENERIC_ERROR : -100,\n\n\t/**\n\t * HTTP transport error. For example if the server produces a HTTP status other than 200.\n\t *\n\t * @property HTTP_ERROR\n\t * @static\n\t * @final\n\t */\n\tHTTP_ERROR : -200,\n\n\t/**\n\t * Generic I/O error. For example if it wasn't possible to open the file stream on local machine.\n\t *\n\t * @property IO_ERROR\n\t * @static\n\t * @final\n\t */\n\tIO_ERROR : -300,\n\n\t/**\n\t * @property SECURITY_ERROR\n\t * @static\n\t * @final\n\t */\n\tSECURITY_ERROR : -400,\n\n\t/**\n\t * Initialization error. Will be triggered if no runtime was initialized.\n\t *\n\t * @property INIT_ERROR\n\t * @static\n\t * @final\n\t */\n\tINIT_ERROR : -500,\n\n\t/**\n\t * File size error. If the user selects a file that is too large it will be blocked and an error of this type will be triggered.\n\t *\n\t * @property FILE_SIZE_ERROR\n\t * @static\n\t * @final\n\t */\n\tFILE_SIZE_ERROR : -600,\n\n\t/**\n\t * File extension error. If the user selects a file that isn't valid according to the filters setting.\n\t *\n\t * @property FILE_EXTENSION_ERROR\n\t * @static\n\t * @final\n\t */\n\tFILE_EXTENSION_ERROR : -601,\n\n\t/**\n\t * Duplicate file error. If prevent_duplicates is set to true and user selects the same file again.\n\t *\n\t * @property FILE_DUPLICATE_ERROR\n\t * @static\n\t * @final\n\t */\n\tFILE_DUPLICATE_ERROR : -602,\n\n\t/**\n\t * Runtime will try to detect if image is proper one. Otherwise will throw this error.\n\t *\n\t * @property IMAGE_FORMAT_ERROR\n\t * @static\n\t * @final\n\t */\n\tIMAGE_FORMAT_ERROR : -700,\n\n\t/**\n\t * While working on files runtime may run out of memory and will throw this error.\n\t *\n\t * @since 2.1.2\n\t * @property MEMORY_ERROR\n\t * @static\n\t * @final\n\t */\n\tMEMORY_ERROR : -701,\n\n\t/**\n\t * Each runtime has an upper limit on a dimension of the image it can handle. If bigger, will throw this error.\n\t *\n\t * @property IMAGE_DIMENSIONS_ERROR\n\t * @static\n\t * @final\n\t */\n\tIMAGE_DIMENSIONS_ERROR : -702,\n\n\t/**\n\t * Mime type lookup table.\n\t *\n\t * @property mimeTypes\n\t * @type Object\n\t * @final\n\t */\n\tmimeTypes : o.mimes,\n\n\t/**\n\t * In some cases sniffing is the only way around :(\n\t */\n\tua: o.ua,\n\n\t/**\n\t * Gets the true type of the built-in object (better version of typeof).\n\t * @credits Angus Croll (http://javascriptweblog.wordpress.com/)\n\t *\n\t * @method typeOf\n\t * @static\n\t * @param {Object} o Object to check.\n\t * @return {String} Object [[Class]]\n\t */\n\ttypeOf: o.typeOf,\n\n\t/**\n\t * Extends the specified object with another object.\n\t *\n\t * @method extend\n\t * @static\n\t * @param {Object} target Object to extend.\n\t * @param {Object..} obj Multiple objects to extend with.\n\t * @return {Object} Same as target, the extended object.\n\t */\n\textend : o.extend,\n\n\t/**\n\t * Generates an unique ID. This is 99.99% unique since it takes the current time and 5 random numbers.\n\t * The only way a user would be able to get the same ID is if the two persons at the same exact millisecond manages\n\t * to get 5 the same random numbers between 0-65535 it also uses a counter so each call will be guaranteed to be page unique.\n\t * It's more probable for the earth to be hit with an asteriod. You can also if you want to be 100% sure set the plupload.guidPrefix property\n\t * to an user unique key.\n\t *\n\t * @method guid\n\t * @static\n\t * @return {String} Virtually unique id.\n\t */\n\tguid : o.guid,\n\n\t/**\n\t * Get array of DOM Elements by their ids.\n\t * \n\t * @method get\n\t * @param {String} id Identifier of the DOM Element\n\t * @return {Array}\n\t*/\n\tgetAll : function get(ids) {\n\t\tvar els = [], el;\n\n\t\tif (plupload.typeOf(ids) !== 'array') {\n\t\t\tids = [ids];\n\t\t}\n\n\t\tvar i = ids.length;\n\t\twhile (i--) {\n\t\t\tel = plupload.get(ids[i]);\n\t\t\tif (el) {\n\t\t\t\tels.push(el);\n\t\t\t}\n\t\t}\n\n\t\treturn els.length ? els : null;\n\t},\n\n\t/**\n\tGet DOM element by id\n\n\t@method get\n\t@param {String} id Identifier of the DOM Element\n\t@return {Node}\n\t*/\n\tget: o.get,\n\n\t/**\n\t * Executes the callback function for each item in array/object. If you return false in the\n\t * callback it will break the loop.\n\t *\n\t * @method each\n\t * @static\n\t * @param {Object} obj Object to iterate.\n\t * @param {function} callback Callback function to execute for each item.\n\t */\n\teach : o.each,\n\n\t/**\n\t * Returns the absolute x, y position of an Element. The position will be returned in a object with x, y fields.\n\t *\n\t * @method getPos\n\t * @static\n\t * @param {Element} node HTML element or element id to get x, y position from.\n\t * @param {Element} root Optional root element to stop calculations at.\n\t * @return {object} Absolute position of the specified element object with x, y fields.\n\t */\n\tgetPos : o.getPos,\n\n\t/**\n\t * Returns the size of the specified node in pixels.\n\t *\n\t * @method getSize\n\t * @static\n\t * @param {Node} node Node to get the size of.\n\t * @return {Object} Object with a w and h property.\n\t */\n\tgetSize : o.getSize,\n\n\t/**\n\t * Encodes the specified string.\n\t *\n\t * @method xmlEncode\n\t * @static\n\t * @param {String} s String to encode.\n\t * @return {String} Encoded string.\n\t */\n\txmlEncode : function(str) {\n\t\tvar xmlEncodeChars = {'<' : 'lt', '>' : 'gt', '&' : 'amp', '\"' : 'quot', '\\'' : '#39'}, xmlEncodeRegExp = /[<>&\\\"\\']/g;\n\n\t\treturn str ? ('' + str).replace(xmlEncodeRegExp, function(chr) {\n\t\t\treturn xmlEncodeChars[chr] ? '&' + xmlEncodeChars[chr] + ';' : chr;\n\t\t}) : str;\n\t},\n\n\t/**\n\t * Forces anything into an array.\n\t *\n\t * @method toArray\n\t * @static\n\t * @param {Object} obj Object with length field.\n\t * @return {Array} Array object containing all items.\n\t */\n\ttoArray : o.toArray,\n\n\t/**\n\t * Find an element in array and return its index if present, otherwise return -1.\n\t *\n\t * @method inArray\n\t * @static\n\t * @param {mixed} needle Element to find\n\t * @param {Array} array\n\t * @return {Int} Index of the element, or -1 if not found\n\t */\n\tinArray : o.inArray,\n\n\t/**\n\t * Extends the language pack object with new items.\n\t *\n\t * @method addI18n\n\t * @static\n\t * @param {Object} pack Language pack items to add.\n\t * @return {Object} Extended language pack object.\n\t */\n\taddI18n : o.addI18n,\n\n\t/**\n\t * Translates the specified string by checking for the english string in the language pack lookup.\n\t *\n\t * @method translate\n\t * @static\n\t * @param {String} str String to look for.\n\t * @return {String} Translated string or the input string if it wasn't found.\n\t */\n\ttranslate : o.translate,\n\n\t/**\n\t * Checks if object is empty.\n\t *\n\t * @method isEmptyObj\n\t * @static\n\t * @param {Object} obj Object to check.\n\t * @return {Boolean}\n\t */\n\tisEmptyObj : o.isEmptyObj,\n\n\t/**\n\t * Checks if specified DOM element has specified class.\n\t *\n\t * @method hasClass\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Class name\n\t */\n\thasClass : o.hasClass,\n\n\t/**\n\t * Adds specified className to specified DOM element.\n\t *\n\t * @method addClass\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Class name\n\t */\n\taddClass : o.addClass,\n\n\t/**\n\t * Removes specified className from specified DOM element.\n\t *\n\t * @method removeClass\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Class name\n\t */\n\tremoveClass : o.removeClass,\n\n\t/**\n\t * Returns a given computed style of a DOM element.\n\t *\n\t * @method getStyle\n\t * @static\n\t * @param {Object} obj DOM element like object.\n\t * @param {String} name Style you want to get from the DOM element\n\t */\n\tgetStyle : o.getStyle,\n\n\t/**\n\t * Adds an event handler to the specified object and store reference to the handler\n\t * in objects internal Plupload registry (@see removeEvent).\n\t *\n\t * @method addEvent\n\t * @static\n\t * @param {Object} obj DOM element like object to add handler to.\n\t * @param {String} name Name to add event listener to.\n\t * @param {Function} callback Function to call when event occurs.\n\t * @param {String} (optional) key that might be used to add specifity to the event record.\n\t */\n\taddEvent : o.addEvent,\n\n\t/**\n\t * Remove event handler from the specified object. If third argument (callback)\n\t * is not specified remove all events with the specified name.\n\t *\n\t * @method removeEvent\n\t * @static\n\t * @param {Object} obj DOM element to remove event listener(s) from.\n\t * @param {String} name Name of event listener to remove.\n\t * @param {Function|String} (optional) might be a callback or unique key to match.\n\t */\n\tremoveEvent: o.removeEvent,\n\n\t/**\n\t * Remove all kind of events from the specified object\n\t *\n\t * @method removeAllEvents\n\t * @static\n\t * @param {Object} obj DOM element to remove event listeners from.\n\t * @param {String} (optional) unique key to match, when removing events.\n\t */\n\tremoveAllEvents: o.removeAllEvents,\n\n\t/**\n\t * Cleans the specified name from national characters (diacritics). The result will be a name with only a-z, 0-9 and _.\n\t *\n\t * @method cleanName\n\t * @static\n\t * @param {String} s String to clean up.\n\t * @return {String} Cleaned string.\n\t */\n\tcleanName : function(name) {\n\t\tvar i, lookup;\n\n\t\t// Replace diacritics\n\t\tlookup = [\n\t\t\t/[\\300-\\306]/g, 'A', /[\\340-\\346]/g, 'a',\n\t\t\t/\\307/g, 'C', /\\347/g, 'c',\n\t\t\t/[\\310-\\313]/g, 'E', /[\\350-\\353]/g, 'e',\n\t\t\t/[\\314-\\317]/g, 'I', /[\\354-\\357]/g, 'i',\n\t\t\t/\\321/g, 'N', /\\361/g, 'n',\n\t\t\t/[\\322-\\330]/g, 'O', /[\\362-\\370]/g, 'o',\n\t\t\t/[\\331-\\334]/g, 'U', /[\\371-\\374]/g, 'u'\n\t\t];\n\n\t\tfor (i = 0; i < lookup.length; i += 2) {\n\t\t\tname = name.replace(lookup[i], lookup[i + 1]);\n\t\t}\n\n\t\t// Replace whitespace\n\t\tname = name.replace(/\\s+/g, '_');\n\n\t\t// Remove anything else\n\t\tname = name.replace(/[^a-z0-9_\\-\\.]+/gi, '');\n\n\t\treturn name;\n\t},\n\n\t/**\n\t * Builds a full url out of a base URL and an object with items to append as query string items.\n\t *\n\t * @method buildUrl\n\t * @static\n\t * @param {String} url Base URL to append query string items to.\n\t * @param {Object} items Name/value object to serialize as a querystring.\n\t * @return {String} String with url + serialized query string items.\n\t */\n\tbuildUrl : function(url, items) {\n\t\tvar query = '';\n\n\t\tplupload.each(items, function(value, name) {\n\t\t\tquery += (query ? '&' : '') + encodeURIComponent(name) + '=' + encodeURIComponent(value);\n\t\t});\n\n\t\tif (query) {\n\t\t\turl += (url.indexOf('?') > 0 ? '&' : '?') + query;\n\t\t}\n\n\t\treturn url;\n\t},\n\n\t/**\n\t * Formats the specified number as a size string for example 1024 becomes 1 KB.\n\t *\n\t * @method formatSize\n\t * @static\n\t * @param {Number} size Size to format as string.\n\t * @return {String} Formatted size string.\n\t */\n\tformatSize : function(size) {\n\n\t\tif (size === undef || /\\D/.test(size)) {\n\t\t\treturn plupload.translate('N/A');\n\t\t}\n\n\t\tfunction round(num, precision) {\n\t\t\treturn Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);\n\t\t}\n\n\t\tvar boundary = Math.pow(1024, 4);\n\n\t\t// TB\n\t\tif (size > boundary) {\n\t\t\treturn round(size / boundary, 1) + \" \" + plupload.translate('tb');\n\t\t}\n\n\t\t// GB\n\t\tif (size > (boundary/=1024)) {\n\t\t\treturn round(size / boundary, 1) + \" \" + plupload.translate('gb');\n\t\t}\n\n\t\t// MB\n\t\tif (size > (boundary/=1024)) {\n\t\t\treturn round(size / boundary, 1) + \" \" + plupload.translate('mb');\n\t\t}\n\n\t\t// KB\n\t\tif (size > 1024) {\n\t\t\treturn Math.round(size / 1024) + \" \" + plupload.translate('kb');\n\t\t}\n\n\t\treturn size + \" \" + plupload.translate('b');\n\t},\n\n\n\t/**\n\t * Parses the specified size string into a byte value. For example 10kb becomes 10240.\n\t *\n\t * @method parseSize\n\t * @static\n\t * @param {String|Number} size String to parse or number to just pass through.\n\t * @return {Number} Size in bytes.\n\t */\n\tparseSize : o.parseSizeStr,\n\n\n\t/**\n\t * A way to predict what runtime will be choosen in the current environment with the\n\t * specified settings.\n\t *\n\t * @method predictRuntime\n\t * @static\n\t * @param {Object|String} config Plupload settings to check\n\t * @param {String} [runtimes] Comma-separated list of runtimes to check against\n\t * @return {String} Type of compatible runtime\n\t */\n\tpredictRuntime : function(config, runtimes) {\n\t\tvar up, runtime;\n\n\t\tup = new plupload.Uploader(config);\n\t\truntime = o.Runtime.thatCan(up.getOption().required_features, runtimes || config.runtimes);\n\t\tup.destroy();\n\t\treturn runtime;\n\t},\n\n\t/**\n\t * Registers a filter that will be executed for each file added to the queue.\n\t * If callback returns false, file will not be added.\n\t *\n\t * Callback receives two arguments: a value for the filter as it was specified in settings.filters\n\t * and a file to be filtered. Callback is executed in the context of uploader instance.\n\t *\n\t * @method addFileFilter\n\t * @static\n\t * @param {String} name Name of the filter by which it can be referenced in settings.filters\n\t * @param {String} cb Callback - the actual routine that every added file must pass\n\t */\n\taddFileFilter: function(name, cb) {\n\t\tfileFilters[name] = cb;\n\t}\n};\n\n\nplupload.addFileFilter('mime_types', function(filters, file, cb) {\n\tif (filters.length && !filters.regexp.test(file.name)) {\n\t\tthis.trigger('Error', {\n\t\t\tcode : plupload.FILE_EXTENSION_ERROR,\n\t\t\tmessage : plupload.translate('File extension error.'),\n\t\t\tfile : file\n\t\t});\n\t\tcb(false);\n\t} else {\n\t\tcb(true);\n\t}\n});\n\n\nplupload.addFileFilter('max_file_size', function(maxSize, file, cb) {\n\tvar undef;\n\n\tmaxSize = plupload.parseSize(maxSize);\n\n\t// Invalid file size\n\tif (file.size !== undef && maxSize && file.size > maxSize) {\n\t\tthis.trigger('Error', {\n\t\t\tcode : plupload.FILE_SIZE_ERROR,\n\t\t\tmessage : plupload.translate('File size error.'),\n\t\t\tfile : file\n\t\t});\n\t\tcb(false);\n\t} else {\n\t\tcb(true);\n\t}\n});\n\n\nplupload.addFileFilter('prevent_duplicates', function(value, file, cb) {\n\tif (value) {\n\t\tvar ii = this.files.length;\n\t\twhile (ii--) {\n\t\t\t// Compare by name and size (size might be 0 or undefined, but still equivalent for both)\n\t\t\tif (file.name === this.files[ii].name && file.size === this.files[ii].size) {\n\t\t\t\tthis.trigger('Error', {\n\t\t\t\t\tcode : plupload.FILE_DUPLICATE_ERROR,\n\t\t\t\t\tmessage : plupload.translate('Duplicate file error.'),\n\t\t\t\t\tfile : file\n\t\t\t\t});\n\t\t\t\tcb(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tcb(true);\n});\n\n\n/**\n@class Uploader\n@constructor\n\n@param {Object} settings For detailed information about each option check documentation.\n\t@param {String|DOMElement} settings.browse_button id of the DOM element or DOM element itself to use as file dialog trigger.\n\t@param {String} settings.url URL of the server-side upload handler.\n\t@param {Number|String} [settings.chunk_size=0] Chunk size in bytes to slice the file into. Shorcuts with b, kb, mb, gb, tb suffixes also supported. `e.g. 204800 or \"204800b\" or \"200kb\"`. By default - disabled.\n\t@param {Boolean} [settings.send_chunk_number=true] Whether to send chunks and chunk numbers, or total and offset bytes.\n\t@param {String|DOMElement} [settings.container] id of the DOM element or DOM element itself that will be used to wrap uploader structures. Defaults to immediate parent of the `browse_button` element.\n\t@param {String|DOMElement} [settings.drop_element] id of the DOM element or DOM element itself to use as a drop zone for Drag-n-Drop.\n\t@param {String} [settings.file_data_name=\"file\"] Name for the file field in Multipart formated message.\n\t@param {Object} [settings.filters={}] Set of file type filters.\n\t\t@param {Array} [settings.filters.mime_types=[]] List of file types to accept, each one defined by title and list of extensions. `e.g. {title : \"Image files\", extensions : \"jpg,jpeg,gif,png\"}`. Dispatches `plupload.FILE_EXTENSION_ERROR`\n\t\t@param {String|Number} [settings.filters.max_file_size=0] Maximum file size that the user can pick, in bytes. Optionally supports b, kb, mb, gb, tb suffixes. `e.g. \"10mb\" or \"1gb\"`. By default - not set. Dispatches `plupload.FILE_SIZE_ERROR`.\n\t\t@param {Boolean} [settings.filters.prevent_duplicates=false] Do not let duplicates into the queue. Dispatches `plupload.FILE_DUPLICATE_ERROR`.\n\t@param {String} [settings.flash_swf_url] URL of the Flash swf.\n\t@param {Object} [settings.headers] Custom headers to send with the upload. Hash of name/value pairs.\n\t@param {Number} [settings.max_retries=0] How many times to retry the chunk or file, before triggering Error event.\n\t@param {Boolean} [settings.multipart=true] Whether to send file and additional parameters as Multipart formated message.\n\t@param {Object} [settings.multipart_params] Hash of key/value pairs to send with every file upload.\n\t@param {Boolean} [settings.multi_selection=true] Enable ability to select multiple files at once in file dialog.\n\t@param {String|Object} [settings.required_features] Either comma-separated list or hash of required features that chosen runtime should absolutely possess.\n\t@param {Object} [settings.resize] Enable resizng of images on client-side. Applies to `image/jpeg` and `image/png` only. `e.g. {width : 200, height : 200, quality : 90, crop: true}`\n\t\t@param {Number} [settings.resize.width] If image is bigger, it will be resized.\n\t\t@param {Number} [settings.resize.height] If image is bigger, it will be resized.\n\t\t@param {Number} [settings.resize.quality=90] Compression quality for jpegs (1-100).\n\t\t@param {Boolean} [settings.resize.crop=false] Whether to crop images to exact dimensions. By default they will be resized proportionally.\n\t@param {String} [settings.runtimes=\"html5,flash,silverlight,html4\"] Comma separated list of runtimes, that Plupload will try in turn, moving to the next if previous fails.\n\t@param {String} [settings.silverlight_xap_url] URL of the Silverlight xap.\n\t@param {Boolean} [settings.unique_names=false] If true will generate unique filenames for uploaded files.\n\t@param {Boolean} [settings.send_file_name=true] Whether to send file name as additional argument - 'name' (required for chunked uploads and some other cases where file name cannot be sent via normal ways).\n*/\nplupload.Uploader = function(options) {\n\t/**\n\tFires when the current RunTime has been initialized.\n\t\n\t@event Init\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\tFires after the init event incase you need to perform actions there.\n\t\n\t@event PostInit\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\tFires when the option is changed in via uploader.setOption().\n\t\n\t@event OptionChanged\n\t@since 2.1\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {String} name Name of the option that was changed\n\t@param {Mixed} value New value for the specified option\n\t@param {Mixed} oldValue Previous value of the option\n\t */\n\n\t/**\n\tFires when the silverlight/flash or other shim needs to move.\n\t\n\t@event Refresh\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\tFires when the overall state is being changed for the upload queue.\n\t\n\t@event StateChanged\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\n\t/**\n\tFires when browse_button is clicked and browse dialog shows.\n\t\n\t@event Browse\n\t@since 2.1.2\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\t\n\n\t/**\n\tFires for every filtered file before it is added to the queue.\n\t\n\t@event FileFiltered\n\t@since 2.1\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {plupload.File} file Another file that has to be added to the queue.\n\t */\n\n\t/**\n\tFires when the file queue is changed. In other words when files are added/removed to the files array of the uploader instance.\n\t\n\t@event QueueChanged\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */ \n\n\t/**\n\tFires after files were filtered and added to the queue.\n\t\n\t@event FilesAdded\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {Array} files Array of file objects that were added to queue by the user.\n\t */\n\n\t/**\n\tFires when file is removed from the queue.\n\t\n\t@event FilesRemoved\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {Array} files Array of files that got removed.\n\t */\n\n\t/**\n\tFires just before a file is uploaded. Can be used to cancel the upload for the specified file\n\tby returning false from the handler.\n\t\n\t@event BeforeUpload\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {plupload.File} file File to be uploaded.\n\t */\n\n\t/**\n\tFires when a file is to be uploaded by the runtime.\n\t\n\t@event UploadFile\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {plupload.File} file File to be uploaded.\n\t */\n\n\t/**\n\tFires while a file is being uploaded. Use this event to update the current file upload progress.\n\t\n\t@event UploadProgress\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {plupload.File} file File that is currently being uploaded.\n\t */\t\n\n\t/**\n\tFires when file chunk is uploaded.\n\t\n\t@event ChunkUploaded\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {plupload.File} file File that the chunk was uploaded for.\n\t@param {Object} result Object with response properties.\n\t\t@param {Number} result.offset The amount of bytes the server has received so far, including this chunk.\n\t\t@param {Number} result.total The size of the file.\n\t\t@param {String} result.response The response body sent by the server.\n\t\t@param {Number} result.status The HTTP status code sent by the server.\n\t\t@param {String} result.responseHeaders All the response headers as a single string.\n\t */\n\n\t/**\n\tFires when a file is successfully uploaded.\n\t\n\t@event FileUploaded\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {plupload.File} file File that was uploaded.\n\t@param {Object} result Object with response properties.\n\t\t@param {String} result.response The response body sent by the server.\n\t\t@param {Number} result.status The HTTP status code sent by the server.\n\t\t@param {String} result.responseHeaders All the response headers as a single string.\n\t */\n\n\t/**\n\tFires when all files in a queue are uploaded.\n\t\n\t@event UploadComplete\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {Array} files Array of file objects that was added to queue/selected by the user.\n\t */\n\n\t/**\n\tFires when a error occurs.\n\t\n\t@event Error\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t@param {Object} error Contains code, message and sometimes file and other details.\n\t\t@param {Number} error.code The plupload error code.\n\t\t@param {String} error.message Description of the error (uses i18n).\n\t */\n\n\t/**\n\tFires when destroy method is called.\n\t\n\t@event Destroy\n\t@param {plupload.Uploader} uploader Uploader instance sending the event.\n\t */\n\tvar uid = plupload.guid()\n\t, settings\n\t, files = []\n\t, preferred_caps = {}\n\t, fileInputs = []\n\t, fileDrops = []\n\t, startTime\n\t, total\n\t, disabled = false\n\t, xhr\n\t;\n\n\n\t// Private methods\n\tfunction uploadNext() {\n\t\tvar file, count = 0, i;\n\n\t\tif (this.state == plupload.STARTED) {\n\t\t\t// Find first QUEUED file\n\t\t\tfor (i = 0; i < files.length; i++) {\n\t\t\t\tif (!file && files[i].status == plupload.QUEUED) {\n\t\t\t\t\tfile = files[i];\n\t\t\t\t\tif (this.trigger(\"BeforeUpload\", file)) {\n\t\t\t\t\t\tfile.status = plupload.UPLOADING;\n\t\t\t\t\t\tthis.trigger(\"UploadFile\", file);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All files are DONE or FAILED\n\t\t\tif (count == files.length) {\n\t\t\t\tif (this.state !== plupload.STOPPED) {\n\t\t\t\t\tthis.state = plupload.STOPPED;\n\t\t\t\t\tthis.trigger(\"StateChanged\");\n\t\t\t\t}\n\t\t\t\tthis.trigger(\"UploadComplete\", files);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction calcFile(file) {\n\t\tfile.percent = file.size > 0 ? Math.ceil(file.loaded / file.size * 100) : 100;\n\t\tcalc();\n\t}\n\n\n\tfunction calc() {\n\t\tvar i, file;\n\n\t\t// Reset stats\n\t\ttotal.reset();\n\n\t\t// Check status, size, loaded etc on all files\n\t\tfor (i = 0; i < files.length; i++) {\n\t\t\tfile = files[i];\n\n\t\t\tif (file.size !== undef) {\n\t\t\t\t// We calculate totals based on original file size\n\t\t\t\ttotal.size += file.origSize;\n\n\t\t\t\t// Since we cannot predict file size after resize, we do opposite and\n\t\t\t\t// interpolate loaded amount to match magnitude of total\n\t\t\t\ttotal.loaded += file.loaded * file.origSize / file.size;\n\t\t\t} else {\n\t\t\t\ttotal.size = undef;\n\t\t\t}\n\n\t\t\tif (file.status == plupload.DONE) {\n\t\t\t\ttotal.uploaded++;\n\t\t\t} else if (file.status == plupload.FAILED) {\n\t\t\t\ttotal.failed++;\n\t\t\t} else {\n\t\t\t\ttotal.queued++;\n\t\t\t}\n\t\t}\n\n\t\t// If we couldn't calculate a total file size then use the number of files to calc percent\n\t\tif (total.size === undef) {\n\t\t\ttotal.percent = files.length > 0 ? Math.ceil(total.uploaded / files.length * 100) : 0;\n\t\t} else {\n\t\t\ttotal.bytesPerSec = Math.ceil(total.loaded / ((+new Date() - startTime || 1) / 1000.0));\n\t\t\ttotal.percent = total.size > 0 ? Math.ceil(total.loaded / total.size * 100) : 0;\n\t\t}\n\t}\n\n\n\tfunction getRUID() {\n\t\tvar ctrl = fileInputs[0] || fileDrops[0];\n\t\tif (ctrl) {\n\t\t\treturn ctrl.getRuntime().uid;\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tfunction runtimeCan(file, cap) {\n\t\tif (file.ruid) {\n\t\t\tvar info = o.Runtime.getInfo(file.ruid);\n\t\t\tif (info) {\n\t\t\t\treturn info.can(cap);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tfunction bindEventListeners() {\n\t\tthis.bind('FilesAdded FilesRemoved', function(up) {\n\t\t\tup.trigger('QueueChanged');\n\t\t\tup.refresh();\n\t\t});\n\n\t\tthis.bind('CancelUpload', onCancelUpload);\n\t\t\n\t\tthis.bind('BeforeUpload', onBeforeUpload);\n\n\t\tthis.bind('UploadFile', onUploadFile);\n\n\t\tthis.bind('UploadProgress', onUploadProgress);\n\n\t\tthis.bind('StateChanged', onStateChanged);\n\n\t\tthis.bind('QueueChanged', calc);\n\n\t\tthis.bind('Error', onError);\n\n\t\tthis.bind('FileUploaded', onFileUploaded);\n\n\t\tthis.bind('Destroy', onDestroy);\n\t}\n\n\n\tfunction initControls(settings, cb) {\n\t\tvar self = this, inited = 0, queue = [];\n\n\t\t// common settings\n\t\tvar options = {\n\t\t\truntime_order: settings.runtimes,\n\t\t\trequired_caps: settings.required_features,\n\t\t\tpreferred_caps: preferred_caps,\n\t\t\tswf_url: settings.flash_swf_url,\n\t\t\txap_url: settings.silverlight_xap_url\n\t\t};\n\n\t\t// add runtime specific options if any\n\t\tplupload.each(settings.runtimes.split(/\\s*,\\s*/), function(runtime) {\n\t\t\tif (settings[runtime]) {\n\t\t\t\toptions[runtime] = settings[runtime];\n\t\t\t}\n\t\t});\n\n\t\t// initialize file pickers - there can be many\n\t\tif (settings.browse_button) {\n\t\t\tplupload.each(settings.browse_button, function(el) {\n\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\tvar fileInput = new o.FileInput(plupload.extend({}, options, {\n\t\t\t\t\t\taccept: settings.filters.mime_types,\n\t\t\t\t\t\tname: settings.file_data_name,\n\t\t\t\t\t\tmultiple: settings.multi_selection,\n\t\t\t\t\t\tcontainer: settings.container,\n\t\t\t\t\t\tbrowse_button: el\n\t\t\t\t\t}));\n\n\t\t\t\t\tfileInput.onready = function() {\n\t\t\t\t\t\tvar info = o.Runtime.getInfo(this.ruid);\n\n\t\t\t\t\t\t// for backward compatibility\n\t\t\t\t\t\to.extend(self.features, {\n\t\t\t\t\t\t\tchunks: info.can('slice_blob'),\n\t\t\t\t\t\t\tmultipart: info.can('send_multipart'),\n\t\t\t\t\t\t\tmulti_selection: info.can('select_multiple')\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tinited++;\n\t\t\t\t\t\tfileInputs.push(this);\n\t\t\t\t\t\tcb();\n\t\t\t\t\t};\n\n\t\t\t\t\tfileInput.onchange = function() {\n\t\t\t\t\t\tself.addFile(this.files);\n\t\t\t\t\t};\n\n\t\t\t\t\tfileInput.bind('mouseenter mouseleave mousedown mouseup', function(e) {\n\t\t\t\t\t\tif (!disabled) {\n\t\t\t\t\t\t\tif (settings.browse_button_hover) {\n\t\t\t\t\t\t\t\tif ('mouseenter' === e.type) {\n\t\t\t\t\t\t\t\t\to.addClass(el, settings.browse_button_hover);\n\t\t\t\t\t\t\t\t} else if ('mouseleave' === e.type) {\n\t\t\t\t\t\t\t\t\to.removeClass(el, settings.browse_button_hover);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (settings.browse_button_active) {\n\t\t\t\t\t\t\t\tif ('mousedown' === e.type) {\n\t\t\t\t\t\t\t\t\to.addClass(el, settings.browse_button_active);\n\t\t\t\t\t\t\t\t} else if ('mouseup' === e.type) {\n\t\t\t\t\t\t\t\t\to.removeClass(el, settings.browse_button_active);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tfileInput.bind('mousedown', function() {\n\t\t\t\t\t\tself.trigger('Browse');\n\t\t\t\t\t});\n\n\t\t\t\t\tfileInput.bind('error runtimeerror', function() {\n\t\t\t\t\t\tfileInput = null;\n\t\t\t\t\t\tcb();\n\t\t\t\t\t});\n\n\t\t\t\t\tfileInput.init();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// initialize drop zones\n\t\tif (settings.drop_element) {\n\t\t\tplupload.each(settings.drop_element, function(el) {\n\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\tvar fileDrop = new o.FileDrop(plupload.extend({}, options, {\n\t\t\t\t\t\tdrop_zone: el\n\t\t\t\t\t}));\n\n\t\t\t\t\tfileDrop.onready = function() {\n\t\t\t\t\t\tvar info = o.Runtime.getInfo(this.ruid);\n\n\t\t\t\t\t\t// for backward compatibility\n\t\t\t\t\t\to.extend(self.features, {\n\t\t\t\t\t\t\tchunks: info.can('slice_blob'),\n\t\t\t\t\t\t\tmultipart: info.can('send_multipart'),\n\t\t\t\t\t\t\tdragdrop: info.can('drag_and_drop')\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tinited++;\n\t\t\t\t\t\tfileDrops.push(this);\n\t\t\t\t\t\tcb();\n\t\t\t\t\t};\n\n\t\t\t\t\tfileDrop.ondrop = function() {\n\t\t\t\t\t\tself.addFile(this.files);\n\t\t\t\t\t};\n\n\t\t\t\t\tfileDrop.bind('error runtimeerror', function() {\n\t\t\t\t\t\tfileDrop = null;\n\t\t\t\t\t\tcb();\n\t\t\t\t\t});\n\n\t\t\t\t\tfileDrop.init();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\n\t\to.inSeries(queue, function() {\n\t\t\tif (typeof(cb) === 'function') {\n\t\t\t\tcb(inited);\n\t\t\t}\n\t\t});\n\t}\n\n\n\tfunction resizeImage(blob, params, cb) {\n\t\tvar img = new o.Image();\n\n\t\ttry {\n\t\t\timg.onload = function() {\n\t\t\t\t// no manipulation required if...\n\t\t\t\tif (params.width > this.width &&\n\t\t\t\t\tparams.height > this.height &&\n\t\t\t\t\tparams.quality === undef &&\n\t\t\t\t\tparams.preserve_headers &&\n\t\t\t\t\t!params.crop\n\t\t\t\t) {\n\t\t\t\t\tthis.destroy();\n\t\t\t\t\treturn cb(blob);\n\t\t\t\t}\n\t\t\t\t// otherwise downsize\n\t\t\t\timg.downsize(params.width, params.height, params.crop, params.preserve_headers);\n\t\t\t};\n\n\t\t\timg.onresize = function() {\n\t\t\t\tcb(this.getAsBlob(blob.type, params.quality));\n\t\t\t\tthis.destroy();\n\t\t\t};\n\n\t\t\timg.onerror = function() {\n\t\t\t\tcb(blob);\n\t\t\t};\n\n\t\t\timg.load(blob);\n\t\t} catch(ex) {\n\t\t\tcb(blob);\n\t\t}\n\t}\n\n\n\tfunction setOption(option, value, init) {\n\t\tvar self = this, reinitRequired = false;\n\n\t\tfunction _setOption(option, value, init) {\n\t\t\tvar oldValue = settings[option];\n\n\t\t\tswitch (option) {\n\t\t\t\tcase 'max_file_size':\n\t\t\t\t\tif (option === 'max_file_size') {\n\t\t\t\t\t\tsettings.max_file_size = settings.filters.max_file_size = value;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'chunk_size':\n\t\t\t\t\tif (value = plupload.parseSize(value)) {\n\t\t\t\t\t\tsettings[option] = value;\n\t\t\t\t\t\tsettings.send_file_name = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'multipart':\n\t\t\t\t\tsettings[option] = value;\n\t\t\t\t\tif (!value) {\n\t\t\t\t\t\tsettings.send_file_name = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'unique_names':\n\t\t\t\t\tsettings[option] = value;\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tsettings.send_file_name = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'filters':\n\t\t\t\t\t// for sake of backward compatibility\n\t\t\t\t\tif (plupload.typeOf(value) === 'array') {\n\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\tmime_types: value\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (init) {\n\t\t\t\t\t\tplupload.extend(settings.filters, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsettings.filters = value;\n\t\t\t\t\t}\n\n\t\t\t\t\t// if file format filters are being updated, regenerate the matching expressions\n\t\t\t\t\tif (value.mime_types) {\n\t\t\t\t\t\tsettings.filters.mime_types.regexp = (function(filters) {\n\t\t\t\t\t\t\tvar extensionsRegExp = [];\n\n\t\t\t\t\t\t\tplupload.each(filters, function(filter) {\n\t\t\t\t\t\t\t\tplupload.each(filter.extensions.split(/,/), function(ext) {\n\t\t\t\t\t\t\t\t\tif (/^\\s*\\*\\s*$/.test(ext)) {\n\t\t\t\t\t\t\t\t\t\textensionsRegExp.push('\\\\.*');\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\textensionsRegExp.push('\\\\.' + ext.replace(new RegExp('[' + ('/^$.*+?|()[]{}\\\\'.replace(/./g, '\\\\$&')) + ']', 'g'), '\\\\$&'));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn new RegExp('(' + extensionsRegExp.join('|') + ')$', 'i');\n\t\t\t\t\t\t}(settings.filters.mime_types));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'resize':\n\t\t\t\t\tif (init) {\n\t\t\t\t\t\tplupload.extend(settings.resize, value, {\n\t\t\t\t\t\t\tenabled: true\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsettings.resize = value;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'prevent_duplicates':\n\t\t\t\t\tsettings.prevent_duplicates = settings.filters.prevent_duplicates = !!value;\n\t\t\t\t\tbreak;\n\n\t\t\t\t// options that require reinitialisation\n\t\t\t\tcase 'container':\n\t\t\t\tcase 'browse_button':\n\t\t\t\tcase 'drop_element':\n\t\t\t\t\t\tvalue = 'container' === option\n\t\t\t\t\t\t\t? plupload.get(value)\n\t\t\t\t\t\t\t: plupload.getAll(value)\n\t\t\t\t\t\t\t; \n\t\t\t\t\n\t\t\t\tcase 'runtimes':\n\t\t\t\tcase 'multi_selection':\n\t\t\t\tcase 'flash_swf_url':\n\t\t\t\tcase 'silverlight_xap_url':\n\t\t\t\t\tsettings[option] = value;\n\t\t\t\t\tif (!init) {\n\t\t\t\t\t\treinitRequired = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tsettings[option] = value;\n\t\t\t}\n\n\t\t\tif (!init) {\n\t\t\t\tself.trigger('OptionChanged', option, value, oldValue);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(option) === 'object') {\n\t\t\tplupload.each(option, function(value, option) {\n\t\t\t\t_setOption(option, value, init);\n\t\t\t});\n\t\t} else {\n\t\t\t_setOption(option, value, init);\n\t\t}\n\n\t\tif (init) {\n\t\t\t// Normalize the list of required capabilities\n\t\t\tsettings.required_features = normalizeCaps(plupload.extend({}, settings));\n\n\t\t\t// Come up with the list of capabilities that can affect default mode in a multi-mode runtimes\n\t\t\tpreferred_caps = normalizeCaps(plupload.extend({}, settings, {\n\t\t\t\trequired_features: true\n\t\t\t}));\n\t\t} else if (reinitRequired) {\n\t\t\tself.trigger('Destroy');\n\t\t\t\n\t\t\tinitControls.call(self, settings, function(inited) {\n\t\t\t\tif (inited) {\n\t\t\t\t\tself.runtime = o.Runtime.getInfo(getRUID()).type;\n\t\t\t\t\tself.trigger('Init', { runtime: self.runtime });\n\t\t\t\t\tself.trigger('PostInit');\n\t\t\t\t} else {\n\t\t\t\t\tself.trigger('Error', {\n\t\t\t\t\t\tcode : plupload.INIT_ERROR,\n\t\t\t\t\t\tmessage : plupload.translate('Init error.')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\n\t// Internal event handlers\n\tfunction onBeforeUpload(up, file) {\n\t\t// Generate unique target filenames\n\t\tif (up.settings.unique_names) {\n\t\t\tvar matches = file.name.match(/\\.([^.]+)$/), ext = \"part\";\n\t\t\tif (matches) {\n\t\t\t\text = matches[1];\n\t\t\t}\n\t\t\tfile.target_name = file.id + '.' + ext;\n\t\t}\n\t}\n\n\n\tfunction onUploadFile(up, file) {\n\t\tvar url = up.settings.url\n\t\t, chunkSize = up.settings.chunk_size\n\t\t, retries = up.settings.max_retries\n\t\t, features = up.features\n\t\t, offset = 0\n\t\t, blob\n\t\t;\n\n\t\t// make sure we start at a predictable offset\n\t\tif (file.loaded) {\n\t\t\toffset = file.loaded = chunkSize ? chunkSize * Math.floor(file.loaded / chunkSize) : 0;\n\t\t}\n\n\t\tfunction handleError() {\n\t\t\tif (retries-- > 0) {\n\t\t\t\tdelay(uploadNextChunk, 1000);\n\t\t\t} else {\n\t\t\t\tfile.loaded = offset; // reset all progress\n\n\t\t\t\tup.trigger('Error', {\n\t\t\t\t\tcode : plupload.HTTP_ERROR,\n\t\t\t\t\tmessage : plupload.translate('HTTP Error.'),\n\t\t\t\t\tfile : file,\n\t\t\t\t\tresponse : xhr.responseText,\n\t\t\t\t\tstatus : xhr.status,\n\t\t\t\t\tresponseHeaders: xhr.getAllResponseHeaders()\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadNextChunk() {\n\t\t\tvar chunkBlob, formData, args = {}, curChunkSize;\n\n\t\t\t// make sure that file wasn't cancelled and upload is not stopped in general\n\t\t\tif (file.status !== plupload.UPLOADING || up.state === plupload.STOPPED) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// send additional 'name' parameter only if required\n\t\t\tif (up.settings.send_file_name) {\n\t\t\t\targs.name = file.target_name || file.name;\n\t\t\t}\n\n\t\t\tif (chunkSize && features.chunks && blob.size > chunkSize) { // blob will be of type string if it was loaded in memory \n\t\t\t\tcurChunkSize = Math.min(chunkSize, blob.size - offset);\n\t\t\t\tchunkBlob = blob.slice(offset, offset + curChunkSize);\n\t\t\t} else {\n\t\t\t\tcurChunkSize = blob.size;\n\t\t\t\tchunkBlob = blob;\n\t\t\t}\n\n\t\t\t// If chunking is enabled add corresponding args, no matter if file is bigger than chunk or smaller\n\t\t\tif (chunkSize && features.chunks) {\n\t\t\t\t// Setup query string arguments\n\t\t\t\tif (up.settings.send_chunk_number) {\n\t\t\t\t\targs.chunk = Math.ceil(offset / chunkSize);\n\t\t\t\t\targs.chunks = Math.ceil(blob.size / chunkSize);\n\t\t\t\t} else { // keep support for experimental chunk format, just in case\n\t\t\t\t\targs.offset = offset;\n\t\t\t\t\targs.total = blob.size;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txhr = new o.XMLHttpRequest();\n\n\t\t\t// Do we have upload progress support\n\t\t\tif (xhr.upload) {\n\t\t\t\txhr.upload.onprogress = function(e) {\n\t\t\t\t\tfile.loaded = Math.min(file.size, offset + e.loaded);\n\t\t\t\t\tup.trigger('UploadProgress', file);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\txhr.onload = function() {\n\t\t\t\t// check if upload made itself through\n\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\thandleError();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tretries = up.settings.max_retries; // reset the counter\n\n\t\t\t\t// Handle chunk response\n\t\t\t\tif (curChunkSize < blob.size) {\n\t\t\t\t\tchunkBlob.destroy();\n\n\t\t\t\t\toffset += curChunkSize;\n\t\t\t\t\tfile.loaded = Math.min(offset, blob.size);\n\n\t\t\t\t\tup.trigger('ChunkUploaded', file, {\n\t\t\t\t\t\toffset : file.loaded,\n\t\t\t\t\t\ttotal : blob.size,\n\t\t\t\t\t\tresponse : xhr.responseText,\n\t\t\t\t\t\tstatus : xhr.status,\n\t\t\t\t\t\tresponseHeaders: xhr.getAllResponseHeaders()\n\t\t\t\t\t});\n\n\t\t\t\t\t// stock Android browser doesn't fire upload progress events, but in chunking mode we can fake them\n\t\t\t\t\tif (o.Env.browser === 'Android Browser') {\n\t\t\t\t\t\t// doesn't harm in general, but is not required anywhere else\n\t\t\t\t\t\tup.trigger('UploadProgress', file);\n\t\t\t\t\t} \n\t\t\t\t} else {\n\t\t\t\t\tfile.loaded = file.size;\n\t\t\t\t}\n\n\t\t\t\tchunkBlob = formData = null; // Free memory\n\n\t\t\t\t// Check if file is uploaded\n\t\t\t\tif (!offset || offset >= blob.size) {\n\t\t\t\t\t// If file was modified, destory the copy\n\t\t\t\t\tif (file.size != file.origSize) {\n\t\t\t\t\t\tblob.destroy();\n\t\t\t\t\t\tblob = null;\n\t\t\t\t\t}\n\n\t\t\t\t\tup.trigger('UploadProgress', file);\n\n\t\t\t\t\tfile.status = plupload.DONE;\n\n\t\t\t\t\tup.trigger('FileUploaded', file, {\n\t\t\t\t\t\tresponse : xhr.responseText,\n\t\t\t\t\t\tstatus : xhr.status,\n\t\t\t\t\t\tresponseHeaders: xhr.getAllResponseHeaders()\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Still chunks left\n\t\t\t\t\tdelay(uploadNextChunk, 1); // run detached, otherwise event handlers interfere\n\t\t\t\t}\n\t\t\t};\n\n\t\t\txhr.onerror = function() {\n\t\t\t\thandleError();\n\t\t\t};\n\n\t\t\txhr.onloadend = function() {\n\t\t\t\tthis.destroy();\n\t\t\t\txhr = null;\n\t\t\t};\n\n\t\t\t// Build multipart request\n\t\t\tif (up.settings.multipart && features.multipart) {\n\t\t\t\txhr.open(\"post\", url, true);\n\n\t\t\t\t// Set custom headers\n\t\t\t\tplupload.each(up.settings.headers, function(value, name) {\n\t\t\t\t\txhr.setRequestHeader(name, value);\n\t\t\t\t});\n\n\t\t\t\tformData = new o.FormData();\n\n\t\t\t\t// Add multipart params\n\t\t\t\tplupload.each(plupload.extend(args, up.settings.multipart_params), function(value, name) {\n\t\t\t\t\tformData.append(name, value);\n\t\t\t\t});\n\n\t\t\t\t// Add file and send it\n\t\t\t\tformData.append(up.settings.file_data_name, chunkBlob);\n\t\t\t\txhr.send(formData, {\n\t\t\t\t\truntime_order: up.settings.runtimes,\n\t\t\t\t\trequired_caps: up.settings.required_features,\n\t\t\t\t\tpreferred_caps: preferred_caps,\n\t\t\t\t\tswf_url: up.settings.flash_swf_url,\n\t\t\t\t\txap_url: up.settings.silverlight_xap_url\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// if no multipart, send as binary stream\n\t\t\t\turl = plupload.buildUrl(up.settings.url, plupload.extend(args, up.settings.multipart_params));\n\n\t\t\t\txhr.open(\"post\", url, true);\n\n\t\t\t\txhr.setRequestHeader('Content-Type', 'application/octet-stream'); // Binary stream header\n\n\t\t\t\t// Set custom headers\n\t\t\t\tplupload.each(up.settings.headers, function(value, name) {\n\t\t\t\t\txhr.setRequestHeader(name, value);\n\t\t\t\t});\n\n\t\t\t\txhr.send(chunkBlob, {\n\t\t\t\t\truntime_order: up.settings.runtimes,\n\t\t\t\t\trequired_caps: up.settings.required_features,\n\t\t\t\t\tpreferred_caps: preferred_caps,\n\t\t\t\t\tswf_url: up.settings.flash_swf_url,\n\t\t\t\t\txap_url: up.settings.silverlight_xap_url\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tblob = file.getSource();\n\n\t\t// Start uploading chunks\n\t\tif (up.settings.resize.enabled && runtimeCan(blob, 'send_binary_string') && !!~o.inArray(blob.type, ['image/jpeg', 'image/png'])) {\n\t\t\t// Resize if required\n\t\t\tresizeImage.call(this, blob, up.settings.resize, function(resizedBlob) {\n\t\t\t\tblob = resizedBlob;\n\t\t\t\tfile.size = resizedBlob.size;\n\t\t\t\tuploadNextChunk();\n\t\t\t});\n\t\t} else {\n\t\t\tuploadNextChunk();\n\t\t}\n\t}\n\n\n\tfunction onUploadProgress(up, file) {\n\t\tcalcFile(file);\n\t}\n\n\n\tfunction onStateChanged(up) {\n\t\tif (up.state == plupload.STARTED) {\n\t\t\t// Get start time to calculate bps\n\t\t\tstartTime = (+new Date());\n\t\t} else if (up.state == plupload.STOPPED) {\n\t\t\t// Reset currently uploading files\n\t\t\tfor (var i = up.files.length - 1; i >= 0; i--) {\n\t\t\t\tif (up.files[i].status == plupload.UPLOADING) {\n\t\t\t\t\tup.files[i].status = plupload.QUEUED;\n\t\t\t\t\tcalc();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction onCancelUpload() {\n\t\tif (xhr) {\n\t\t\txhr.abort();\n\t\t}\n\t}\n\n\n\tfunction onFileUploaded(up) {\n\t\tcalc();\n\n\t\t// Upload next file but detach it from the error event\n\t\t// since other custom listeners might want to stop the queue\n\t\tdelay(function() {\n\t\t\tuploadNext.call(up);\n\t\t}, 1);\n\t}\n\n\n\tfunction onError(up, err) {\n\t\tif (err.code === plupload.INIT_ERROR) {\n\t\t\tup.destroy();\n\t\t}\n\t\t// Set failed status if an error occured on a file\n\t\telse if (err.code === plupload.HTTP_ERROR) {\n\t\t\terr.file.status = plupload.FAILED;\n\t\t\tcalcFile(err.file);\n\n\t\t\t// Upload next file but detach it from the error event\n\t\t\t// since other custom listeners might want to stop the queue\n\t\t\tif (up.state == plupload.STARTED) { // upload in progress\n\t\t\t\tup.trigger('CancelUpload');\n\t\t\t\tdelay(function() {\n\t\t\t\t\tuploadNext.call(up);\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction onDestroy(up) {\n\t\tup.stop();\n\n\t\t// Purge the queue\n\t\tplupload.each(files, function(file) {\n\t\t\tfile.destroy();\n\t\t});\n\t\tfiles = [];\n\n\t\tif (fileInputs.length) {\n\t\t\tplupload.each(fileInputs, function(fileInput) {\n\t\t\t\tfileInput.destroy();\n\t\t\t});\n\t\t\tfileInputs = [];\n\t\t}\n\n\t\tif (fileDrops.length) {\n\t\t\tplupload.each(fileDrops, function(fileDrop) {\n\t\t\t\tfileDrop.destroy();\n\t\t\t});\n\t\t\tfileDrops = [];\n\t\t}\n\n\t\tpreferred_caps = {};\n\t\tdisabled = false;\n\t\tstartTime = xhr = null;\n\t\ttotal.reset();\n\t}\n\n\n\t// Default settings\n\tsettings = {\n\t\truntimes: o.Runtime.order,\n\t\tmax_retries: 0,\n\t\tchunk_size: 0,\n\t\tmultipart: true,\n\t\tmulti_selection: true,\n\t\tfile_data_name: 'file',\n\t\tflash_swf_url: 'js/Moxie.swf',\n\t\tsilverlight_xap_url: 'js/Moxie.xap',\n\t\tfilters: {\n\t\t\tmime_types: [],\n\t\t\tprevent_duplicates: false,\n\t\t\tmax_file_size: 0\n\t\t},\n\t\tresize: {\n\t\t\tenabled: false,\n\t\t\tpreserve_headers: true,\n\t\t\tcrop: false\n\t\t},\n\t\tsend_file_name: true,\n\t\tsend_chunk_number: true\n\t};\n\n\t\n\tsetOption.call(this, options, null, true);\n\n\t// Inital total state\n\ttotal = new plupload.QueueProgress(); \n\n\t// Add public methods\n\tplupload.extend(this, {\n\n\t\t/**\n\t\t * Unique id for the Uploader instance.\n\t\t *\n\t\t * @property id\n\t\t * @type String\n\t\t */\n\t\tid : uid,\n\t\tuid : uid, // mOxie uses this to differentiate between event targets\n\n\t\t/**\n\t\t * Current state of the total uploading progress. This one can either be plupload.STARTED or plupload.STOPPED.\n\t\t * These states are controlled by the stop/start methods. The default value is STOPPED.\n\t\t *\n\t\t * @property state\n\t\t * @type Number\n\t\t */\n\t\tstate : plupload.STOPPED,\n\n\t\t/**\n\t\t * Map of features that are available for the uploader runtime. Features will be filled\n\t\t * before the init event is called, these features can then be used to alter the UI for the end user.\n\t\t * Some of the current features that might be in this map is: dragdrop, chunks, jpgresize, pngresize.\n\t\t *\n\t\t * @property features\n\t\t * @type Object\n\t\t */\n\t\tfeatures : {},\n\n\t\t/**\n\t\t * Current runtime name.\n\t\t *\n\t\t * @property runtime\n\t\t * @type String\n\t\t */\n\t\truntime : null,\n\n\t\t/**\n\t\t * Current upload queue, an array of File instances.\n\t\t *\n\t\t * @property files\n\t\t * @type Array\n\t\t * @see plupload.File\n\t\t */\n\t\tfiles : files,\n\n\t\t/**\n\t\t * Object with name/value settings.\n\t\t *\n\t\t * @property settings\n\t\t * @type Object\n\t\t */\n\t\tsettings : settings,\n\n\t\t/**\n\t\t * Total progess information. How many files has been uploaded, total percent etc.\n\t\t *\n\t\t * @property total\n\t\t * @type plupload.QueueProgress\n\t\t */\n\t\ttotal : total,\n\n\n\t\t/**\n\t\t * Initializes the Uploader instance and adds internal event listeners.\n\t\t *\n\t\t * @method init\n\t\t */\n\t\tinit : function() {\n\t\t\tvar self = this, opt, preinitOpt, err;\n\t\t\t\n\t\t\tpreinitOpt = self.getOption('preinit');\n\t\t\tif (typeof(preinitOpt) == \"function\") {\n\t\t\t\tpreinitOpt(self);\n\t\t\t} else {\n\t\t\t\tplupload.each(preinitOpt, function(func, name) {\n\t\t\t\t\tself.bind(name, func);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbindEventListeners.call(self);\n\n\t\t\t// Check for required options\n\t\t\tplupload.each(['container', 'browse_button', 'drop_element'], function(el) {\n\t\t\t\tif (self.getOption(el) === null) {\n\t\t\t\t\terr = {\n\t\t\t\t\t\tcode : plupload.INIT_ERROR,\n\t\t\t\t\t\tmessage : plupload.translate(\"'%' specified, but cannot be found.\")\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (err) {\n\t\t\t\treturn self.trigger('Error', err);\n\t\t\t}\n\n\n\t\t\tif (!settings.browse_button && !settings.drop_element) {\n\t\t\t\treturn self.trigger('Error', {\n\t\t\t\t\tcode : plupload.INIT_ERROR,\n\t\t\t\t\tmessage : plupload.translate(\"You must specify either 'browse_button' or 'drop_element'.\")\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t\tinitControls.call(self, settings, function(inited) {\n\t\t\t\tvar initOpt = self.getOption('init');\n\t\t\t\tif (typeof(initOpt) == \"function\") {\n\t\t\t\t\tinitOpt(self);\n\t\t\t\t} else {\n\t\t\t\t\tplupload.each(initOpt, function(func, name) {\n\t\t\t\t\t\tself.bind(name, func);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (inited) {\n\t\t\t\t\tself.runtime = o.Runtime.getInfo(getRUID()).type;\n\t\t\t\t\tself.trigger('Init', { runtime: self.runtime });\n\t\t\t\t\tself.trigger('PostInit');\n\t\t\t\t} else {\n\t\t\t\t\tself.trigger('Error', {\n\t\t\t\t\t\tcode : plupload.INIT_ERROR,\n\t\t\t\t\t\tmessage : plupload.translate('Init error.')\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Set the value for the specified option(s).\n\t\t *\n\t\t * @method setOption\n\t\t * @since 2.1\n\t\t * @param {String|Object} option Name of the option to change or the set of key/value pairs\n\t\t * @param {Mixed} [value] Value for the option (is ignored, if first argument is object)\n\t\t */\n\t\tsetOption: function(option, value) {\n\t\t\tsetOption.call(this, option, value, !this.runtime); // until runtime not set we do not need to reinitialize\n\t\t},\n\n\t\t/**\n\t\t * Get the value for the specified option or the whole configuration, if not specified.\n\t\t * \n\t\t * @method getOption\n\t\t * @since 2.1\n\t\t * @param {String} [option] Name of the option to get\n\t\t * @return {Mixed} Value for the option or the whole set\n\t\t */\n\t\tgetOption: function(option) {\n\t\t\tif (!option) {\n\t\t\t\treturn settings;\n\t\t\t}\n\t\t\treturn settings[option];\n\t\t},\n\n\t\t/**\n\t\t * Refreshes the upload instance by dispatching out a refresh event to all runtimes.\n\t\t * This would for example reposition flash/silverlight shims on the page.\n\t\t *\n\t\t * @method refresh\n\t\t */\n\t\trefresh : function() {\n\t\t\tif (fileInputs.length) {\n\t\t\t\tplupload.each(fileInputs, function(fileInput) {\n\t\t\t\t\tfileInput.trigger('Refresh');\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.trigger('Refresh');\n\t\t},\n\n\t\t/**\n\t\t * Starts uploading the queued files.\n\t\t *\n\t\t * @method start\n\t\t */\n\t\tstart : function() {\n\t\t\tif (this.state != plupload.STARTED) {\n\t\t\t\tthis.state = plupload.STARTED;\n\t\t\t\tthis.trigger('StateChanged');\n\n\t\t\t\tuploadNext.call(this);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Stops the upload of the queued files.\n\t\t *\n\t\t * @method stop\n\t\t */\n\t\tstop : function() {\n\t\t\tif (this.state != plupload.STOPPED) {\n\t\t\t\tthis.state = plupload.STOPPED;\n\t\t\t\tthis.trigger('StateChanged');\n\t\t\t\tthis.trigger('CancelUpload');\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Disables/enables browse button on request.\n\t\t *\n\t\t * @method disableBrowse\n\t\t * @param {Boolean} disable Whether to disable or enable (default: true)\n\t\t */\n\t\tdisableBrowse : function() {\n\t\t\tdisabled = arguments[0] !== undef ? arguments[0] : true;\n\n\t\t\tif (fileInputs.length) {\n\t\t\t\tplupload.each(fileInputs, function(fileInput) {\n\t\t\t\t\tfileInput.disable(disabled);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.trigger('DisableBrowse', disabled);\n\t\t},\n\n\t\t/**\n\t\t * Returns the specified file object by id.\n\t\t *\n\t\t * @method getFile\n\t\t * @param {String} id File id to look for.\n\t\t * @return {plupload.File} File object or undefined if it wasn't found;\n\t\t */\n\t\tgetFile : function(id) {\n\t\t\tvar i;\n\t\t\tfor (i = files.length - 1; i >= 0; i--) {\n\t\t\t\tif (files[i].id === id) {\n\t\t\t\t\treturn files[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Adds file to the queue programmatically. Can be native file, instance of Plupload.File,\n\t\t * instance of mOxie.File, input[type=\"file\"] element, or array of these. Fires FilesAdded, \n\t\t * if any files were added to the queue. Otherwise nothing happens.\n\t\t *\n\t\t * @method addFile\n\t\t * @since 2.0\n\t\t * @param {plupload.File|mOxie.File|File|Node|Array} file File or files to add to the queue.\n\t\t * @param {String} [fileName] If specified, will be used as a name for the file\n\t\t */\n\t\taddFile : function(file, fileName) {\n\t\t\tvar self = this\n\t\t\t, queue = [] \n\t\t\t, filesAdded = []\n\t\t\t, ruid\n\t\t\t;\n\n\t\t\tfunction filterFile(file, cb) {\n\t\t\t\tvar queue = [];\n\t\t\t\to.each(self.settings.filters, function(rule, name) {\n\t\t\t\t\tif (fileFilters[name]) {\n\t\t\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\t\t\tfileFilters[name].call(self, rule, file, function(res) {\n\t\t\t\t\t\t\t\tcb(!res);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\to.inSeries(queue, cb);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @method resolveFile\n\t\t\t * @private\n\t\t\t * @param {o.File|o.Blob|plupload.File|File|Blob|input[type=\"file\"]} file\n\t\t\t */\n\t\t\tfunction resolveFile(file) {\n\t\t\t\tvar type = o.typeOf(file);\n\n\t\t\t\t// o.File\n\t\t\t\tif (file instanceof o.File) { \n\t\t\t\t\tif (!file.ruid && !file.isDetached()) {\n\t\t\t\t\t\tif (!ruid) { // weird case\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfile.ruid = ruid;\n\t\t\t\t\t\tfile.connectRuntime(ruid);\n\t\t\t\t\t}\n\t\t\t\t\tresolveFile(new plupload.File(file));\n\t\t\t\t}\n\t\t\t\t// o.Blob \n\t\t\t\telse if (file instanceof o.Blob) {\n\t\t\t\t\tresolveFile(file.getSource());\n\t\t\t\t\tfile.destroy();\n\t\t\t\t} \n\t\t\t\t// plupload.File - final step for other branches\n\t\t\t\telse if (file instanceof plupload.File) {\n\t\t\t\t\tif (fileName) {\n\t\t\t\t\t\tfile.name = fileName;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tqueue.push(function(cb) {\n\t\t\t\t\t\t// run through the internal and user-defined filters, if any\n\t\t\t\t\t\tfilterFile(file, function(err) {\n\t\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\t\t// make files available for the filters by updating the main queue directly\n\t\t\t\t\t\t\t\tfiles.push(file);\n\t\t\t\t\t\t\t\t// collect the files that will be passed to FilesAdded event\n\t\t\t\t\t\t\t\tfilesAdded.push(file); \n\n\t\t\t\t\t\t\t\tself.trigger(\"FileFiltered\", file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelay(cb, 1); // do not build up recursions or eventually we might hit the limits\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} \n\t\t\t\t// native File or blob\n\t\t\t\telse if (o.inArray(type, ['file', 'blob']) !== -1) {\n\t\t\t\t\tresolveFile(new o.File(null, file));\n\t\t\t\t} \n\t\t\t\t// input[type=\"file\"]\n\t\t\t\telse if (type === 'node' && o.typeOf(file.files) === 'filelist') {\n\t\t\t\t\t// if we are dealing with input[type=\"file\"]\n\t\t\t\t\to.each(file.files, resolveFile);\n\t\t\t\t} \n\t\t\t\t// mixed array of any supported types (see above)\n\t\t\t\telse if (type === 'array') {\n\t\t\t\t\tfileName = null; // should never happen, but unset anyway to avoid funny situations\n\t\t\t\t\to.each(file, resolveFile);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\truid = getRUID();\n\t\t\t\n\t\t\tresolveFile(file);\n\n\t\t\tif (queue.length) {\n\t\t\t\to.inSeries(queue, function() {\n\t\t\t\t\t// if any files left after filtration, trigger FilesAdded\n\t\t\t\t\tif (filesAdded.length) {\n\t\t\t\t\t\tself.trigger(\"FilesAdded\", filesAdded);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Removes a specific file.\n\t\t *\n\t\t * @method removeFile\n\t\t * @param {plupload.File|String} file File to remove from queue.\n\t\t */\n\t\tremoveFile : function(file) {\n\t\t\tvar id = typeof(file) === 'string' ? file : file.id;\n\n\t\t\tfor (var i = files.length - 1; i >= 0; i--) {\n\t\t\t\tif (files[i].id === id) {\n\t\t\t\t\treturn this.splice(i, 1)[0];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Removes part of the queue and returns the files removed. This will also trigger the FilesRemoved and QueueChanged events.\n\t\t *\n\t\t * @method splice\n\t\t * @param {Number} start (Optional) Start index to remove from.\n\t\t * @param {Number} length (Optional) Lengh of items to remove.\n\t\t * @return {Array} Array of files that was removed.\n\t\t */\n\t\tsplice : function(start, length) {\n\t\t\t// Splice and trigger events\n\t\t\tvar removed = files.splice(start === undef ? 0 : start, length === undef ? files.length : length);\n\n\t\t\t// if upload is in progress we need to stop it and restart after files are removed\n\t\t\tvar restartRequired = false;\n\t\t\tif (this.state == plupload.STARTED) { // upload in progress\n\t\t\t\tplupload.each(removed, function(file) {\n\t\t\t\t\tif (file.status === plupload.UPLOADING) {\n\t\t\t\t\t\trestartRequired = true; // do not restart, unless file that is being removed is uploading\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (restartRequired) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.trigger(\"FilesRemoved\", removed);\n\n\t\t\t// Dispose any resources allocated by those files\n\t\t\tplupload.each(removed, function(file) {\n\t\t\t\tfile.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tif (restartRequired) {\n\t\t\t\tthis.start();\n\t\t\t}\n\n\t\t\treturn removed;\n\t\t},\n\n\t\t/**\n\t\tDispatches the specified event name and its arguments to all listeners.\n\n\t\t@method trigger\n\t\t@param {String} name Event name to fire.\n\t\t@param {Object..} Multiple arguments to pass along to the listener functions.\n\t\t*/\n\n\t\t// override the parent method to match Plupload-like event logic\n\t\tdispatchEvent: function(type) {\n\t\t\tvar list, args, result;\n\t\t\t\t\t\t\n\t\t\ttype = type.toLowerCase();\n\t\t\t\t\t\t\t\n\t\t\tlist = this.hasEventListener(type);\n\n\t\t\tif (list) {\n\t\t\t\t// sort event list by priority\n\t\t\t\tlist.sort(function(a, b) { return b.priority - a.priority; });\n\t\t\t\t\n\t\t\t\t// first argument should be current plupload.Uploader instance\n\t\t\t\targs = [].slice.call(arguments);\n\t\t\t\targs.shift();\n\t\t\t\targs.unshift(this);\n\n\t\t\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\t\t\t// Fire event, break chain if false is returned\n\t\t\t\t\tif (list[i].fn.apply(list[i].scope, args) === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\tCheck whether uploader has any listeners to the specified event.\n\n\t\t@method hasEventListener\n\t\t@param {String} name Event name to check for.\n\t\t*/\n\n\n\t\t/**\n\t\tAdds an event listener by name.\n\n\t\t@method bind\n\t\t@param {String} name Event name to listen for.\n\t\t@param {function} fn Function to call ones the event gets fired.\n\t\t@param {Object} [scope] Optional scope to execute the specified function in.\n\t\t@param {Number} [priority=0] Priority of the event handler - handlers with higher priorities will be called first\n\t\t*/\n\t\tbind: function(name, fn, scope, priority) {\n\t\t\t// adapt moxie EventTarget style to Plupload-like\n\t\t\tplupload.Uploader.prototype.bind.call(this, name, fn, priority, scope);\n\t\t},\n\n\t\t/**\n\t\tRemoves the specified event listener.\n\n\t\t@method unbind\n\t\t@param {String} name Name of event to remove.\n\t\t@param {function} fn Function to remove from listener.\n\t\t*/\n\n\t\t/**\n\t\tRemoves all event listeners.\n\n\t\t@method unbindAll\n\t\t*/\n\n\n\t\t/**\n\t\t * Destroys Plupload instance and cleans after itself.\n\t\t *\n\t\t * @method destroy\n\t\t */\n\t\tdestroy : function() {\n\t\t\tthis.trigger('Destroy');\n\t\t\tsettings = total = null; // purge these exclusively\n\t\t\tthis.unbindAll();\n\t\t}\n\t});\n};\n\nplupload.Uploader.prototype = o.EventTarget.instance;\n\n/**\n * Constructs a new file instance.\n *\n * @class File\n * @constructor\n * \n * @param {Object} file Object containing file properties\n * @param {String} file.name Name of the file.\n * @param {Number} file.size File size.\n */\nplupload.File = (function() {\n\tvar filepool = {};\n\n\tfunction PluploadFile(file) {\n\n\t\tplupload.extend(this, {\n\n\t\t\t/**\n\t\t\t * File id this is a globally unique id for the specific file.\n\t\t\t *\n\t\t\t * @property id\n\t\t\t * @type String\n\t\t\t */\n\t\t\tid: plupload.guid(),\n\n\t\t\t/**\n\t\t\t * File name for example \"myfile.gif\".\n\t\t\t *\n\t\t\t * @property name\n\t\t\t * @type String\n\t\t\t */\n\t\t\tname: file.name || file.fileName,\n\n\t\t\t/**\n\t\t\t * File type, `e.g image/jpeg`\n\t\t\t *\n\t\t\t * @property type\n\t\t\t * @type String\n\t\t\t */\n\t\t\ttype: file.type || '',\n\n\t\t\t/**\n\t\t\t * File size in bytes (may change after client-side manupilation).\n\t\t\t *\n\t\t\t * @property size\n\t\t\t * @type Number\n\t\t\t */\n\t\t\tsize: file.size || file.fileSize,\n\n\t\t\t/**\n\t\t\t * Original file size in bytes.\n\t\t\t *\n\t\t\t * @property origSize\n\t\t\t * @type Number\n\t\t\t */\n\t\t\torigSize: file.size || file.fileSize,\n\n\t\t\t/**\n\t\t\t * Number of bytes uploaded of the files total size.\n\t\t\t *\n\t\t\t * @property loaded\n\t\t\t * @type Number\n\t\t\t */\n\t\t\tloaded: 0,\n\n\t\t\t/**\n\t\t\t * Number of percentage uploaded of the file.\n\t\t\t *\n\t\t\t * @property percent\n\t\t\t * @type Number\n\t\t\t */\n\t\t\tpercent: 0,\n\n\t\t\t/**\n\t\t\t * Status constant matching the plupload states QUEUED, UPLOADING, FAILED, DONE.\n\t\t\t *\n\t\t\t * @property status\n\t\t\t * @type Number\n\t\t\t * @see plupload\n\t\t\t */\n\t\t\tstatus: plupload.QUEUED,\n\n\t\t\t/**\n\t\t\t * Date of last modification.\n\t\t\t *\n\t\t\t * @property lastModifiedDate\n\t\t\t * @type {String}\n\t\t\t */\n\t\t\tlastModifiedDate: file.lastModifiedDate || (new Date()).toLocaleString(), // Thu Aug 23 2012 19:40:00 GMT+0400 (GET)\n\n\t\t\t/**\n\t\t\t * Returns native window.File object, when it's available.\n\t\t\t *\n\t\t\t * @method getNative\n\t\t\t * @return {window.File} or null, if plupload.File is of different origin\n\t\t\t */\n\t\t\tgetNative: function() {\n\t\t\t\tvar file = this.getSource().getSource();\n\t\t\t\treturn o.inArray(o.typeOf(file), ['blob', 'file']) !== -1 ? file : null;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns mOxie.File - unified wrapper object that can be used across runtimes.\n\t\t\t *\n\t\t\t * @method getSource\n\t\t\t * @return {mOxie.File} or null\n\t\t\t */\n\t\t\tgetSource: function() {\n\t\t\t\tif (!filepool[this.id]) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn filepool[this.id];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Destroys plupload.File object.\n\t\t\t *\n\t\t\t * @method destroy\n\t\t\t */\n\t\t\tdestroy: function() {\n\t\t\t\tvar src = this.getSource();\n\t\t\t\tif (src) {\n\t\t\t\t\tsrc.destroy();\n\t\t\t\t\tdelete filepool[this.id];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tfilepool[this.id] = file;\n\t}\n\n\treturn PluploadFile;\n}());\n\n\n/**\n * Constructs a queue progress.\n *\n * @class QueueProgress\n * @constructor\n */\n plupload.QueueProgress = function() {\n\tvar self = this; // Setup alias for self to reduce code size when it's compressed\n\n\t/**\n\t * Total queue file size.\n\t *\n\t * @property size\n\t * @type Number\n\t */\n\tself.size = 0;\n\n\t/**\n\t * Total bytes uploaded.\n\t *\n\t * @property loaded\n\t * @type Number\n\t */\n\tself.loaded = 0;\n\n\t/**\n\t * Number of files uploaded.\n\t *\n\t * @property uploaded\n\t * @type Number\n\t */\n\tself.uploaded = 0;\n\n\t/**\n\t * Number of files failed to upload.\n\t *\n\t * @property failed\n\t * @type Number\n\t */\n\tself.failed = 0;\n\n\t/**\n\t * Number of files yet to be uploaded.\n\t *\n\t * @property queued\n\t * @type Number\n\t */\n\tself.queued = 0;\n\n\t/**\n\t * Total percent of the uploaded bytes.\n\t *\n\t * @property percent\n\t * @type Number\n\t */\n\tself.percent = 0;\n\n\t/**\n\t * Bytes uploaded per second.\n\t *\n\t * @property bytesPerSec\n\t * @type Number\n\t */\n\tself.bytesPerSec = 0;\n\n\t/**\n\t * Resets the progress to its initial values.\n\t *\n\t * @method reset\n\t */\n\tself.reset = function() {\n\t\tself.size = self.loaded = self.uploaded = self.failed = self.queued = self.percent = self.bytesPerSec = 0;\n\t};\n};\n\nwindow.plupload = plupload;\n\n}(window, mOxie));\n"]}